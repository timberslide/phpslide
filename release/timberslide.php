<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: timberslide.proto
//   Date: 2016-11-26 20:43:00

namespace ts {

  class Event extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Topic = null;
    
    /**  @var string */
    public $Message = null;
    
    /**  @var boolean */
    public $Done = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ts.Event');

      // OPTIONAL STRING Topic = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Topic";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Message = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL Done = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "Done";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Topic> has a value
     *
     * @return boolean
     */
    public function hasTopic(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Topic> value
     *
     * @return \ts\Event
     */
    public function clearTopic(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Topic> value
     *
     * @return string
     */
    public function getTopic(){
      return $this->_get(1);
    }
    
    /**
     * Set <Topic> value
     *
     * @param string $value
     * @return \ts\Event
     */
    public function setTopic( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Message> value
     *
     * @return \ts\Event
     */
    public function clearMessage(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(2);
    }
    
    /**
     * Set <Message> value
     *
     * @param string $value
     * @return \ts\Event
     */
    public function setMessage( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <Done> has a value
     *
     * @return boolean
     */
    public function hasDone(){
      return $this->_has(3);
    }
    
    /**
     * Clear <Done> value
     *
     * @return \ts\Event
     */
    public function clearDone(){
      return $this->_clear(3);
    }
    
    /**
     * Get <Done> value
     *
     * @return boolean
     */
    public function getDone(){
      return $this->_get(3);
    }
    
    /**
     * Set <Done> value
     *
     * @param boolean $value
     * @return \ts\Event
     */
    public function setDone( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace ts {

  class EventReply extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ts.EventReply');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace ts {

  class Topic extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $ID = null;
    
    /**  @var string */
    public $Name = null;
    
    /**  @var int */
    public $Position = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ts.Topic');

      // OPTIONAL INT64 ID = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ID";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING Name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "Name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 Position = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "Position";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ID> has a value
     *
     * @return boolean
     */
    public function hasID(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ID> value
     *
     * @return \ts\Topic
     */
    public function clearID(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ID> value
     *
     * @return int
     */
    public function getID(){
      return $this->_get(1);
    }
    
    /**
     * Set <ID> value
     *
     * @param int $value
     * @return \ts\Topic
     */
    public function setID( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <Name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <Name> value
     *
     * @return \ts\Topic
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <Name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <Name> value
     *
     * @param string $value
     * @return \ts\Topic
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <Position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(3);
    }
    
    /**
     * Clear <Position> value
     *
     * @return \ts\Topic
     */
    public function clearPosition(){
      return $this->_clear(3);
    }
    
    /**
     * Get <Position> value
     *
     * @return int
     */
    public function getPosition(){
      return $this->_get(3);
    }
    
    /**
     * Set <Position> value
     *
     * @param int $value
     * @return \ts\Topic
     */
    public function setPosition( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace ts {

  class Register extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $Topic = null;
    
    /**  @var string */
    public $User = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ts.Register');

      // OPTIONAL STRING Topic = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "Topic";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING User = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "User";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <Topic> has a value
     *
     * @return boolean
     */
    public function hasTopic(){
      return $this->_has(1);
    }
    
    /**
     * Clear <Topic> value
     *
     * @return \ts\Register
     */
    public function clearTopic(){
      return $this->_clear(1);
    }
    
    /**
     * Get <Topic> value
     *
     * @return string
     */
    public function getTopic(){
      return $this->_get(1);
    }
    
    /**
     * Set <Topic> value
     *
     * @param string $value
     * @return \ts\Register
     */
    public function setTopic( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <User> has a value
     *
     * @return boolean
     */
    public function hasUser(){
      return $this->_has(2);
    }
    
    /**
     * Clear <User> value
     *
     * @return \ts\Register
     */
    public function clearUser(){
      return $this->_clear(2);
    }
    
    /**
     * Get <User> value
     *
     * @return string
     */
    public function getUser(){
      return $this->_get(2);
    }
    
    /**
     * Set <User> value
     *
     * @param string $value
     * @return \ts\Register
     */
    public function setUser( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace ts {

  class RegisterReply extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ts.RegisterReply');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace ts {

  class TopicsReq extends \DrSlump\Protobuf\Message {


    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ts.TopicsReq');

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }
  }
}

namespace ts {

  class TopicsReply extends \DrSlump\Protobuf\Message {

    /**  @var \ts\Topic[]  */
    public $topics = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'ts.TopicsReply');

      // REPEATED MESSAGE topics = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "topics";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\ts\Topic';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <topics> has a value
     *
     * @return boolean
     */
    public function hasTopics(){
      return $this->_has(1);
    }
    
    /**
     * Clear <topics> value
     *
     * @return \ts\TopicsReply
     */
    public function clearTopics(){
      return $this->_clear(1);
    }
    
    /**
     * Get <topics> value
     *
     * @param int $idx
     * @return \ts\Topic
     */
    public function getTopics($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <topics> value
     *
     * @param \ts\Topic $value
     * @return \ts\TopicsReply
     */
    public function setTopics(\ts\Topic $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <topics>
     *
     * @return \ts\Topic[]
     */
    public function getTopicsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <topics>
     *
     * @param \ts\Topic $value
     * @return \ts\TopicsReply
     */
    public function addTopics(\ts\Topic $value){
     return $this->_add(1, $value);
    }
  }
}

namespace ts {

  class IngestClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param ts\Event $input
     */
    public function StreamEvents($metadata = array(), $options = array()) {
      return $this->_bidiRequest('/ts.Ingest/StreamEvents', '\ts\EventReply::deserialize', $metadata, $options);
    }
  }
}
namespace ts {

  class StreamerClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param ts\Topic $input
     */
    public function GetStream($argument, $metadata = array(), $options = array()) {
      return $this->_serverStreamRequest('/ts.Streamer/GetStream', $argument, '\ts\Event::deserialize', $metadata, $options);
    }
  }
}
namespace ts {

  class TopicsClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param ts\Register $input
     */
    public function registerTopic(\ts\Register $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ts.Topics/registerTopic', $argument, '\ts\RegisterReply::deserialize', $metadata, $options);
    }
    /**
     * @param ts\TopicsReq $input
     */
    public function getTopics(\ts\TopicsReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/ts.Topics/getTopics', $argument, '\ts\TopicsReply::deserialize', $metadata, $options);
    }
  }
}
